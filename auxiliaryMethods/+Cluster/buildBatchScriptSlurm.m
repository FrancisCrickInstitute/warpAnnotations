function script = buildBatchScriptSlurm(cluster, job, props, varargin)
    % Written by
    %   Alessandro Motta <alessandro.motta@brain.mpg.de>
    %   Sahil Loomba <sahil.loomba@brain.mpg.de>

    jobName = job.Name;
    numTasks = props.NumberOfTasks;

    % Get the tasks for use in the loop
    taskLogs = arrayfun( ...
        @(t) cluster.getLogLocation(t), ...
        job.Tasks, 'UniformOutput', false);
    taskLocs = props.TaskLocations;
    
    % Set decode function (no idea what this is used for...)
    decodeFunction = 'parallel.cluster.generic.independentDecodeFcn';
    matlabArgs = strtrim(props.MatlabArguments);

    % Setup job specific environment variables
    % MDCE_TASK_LOCATION must always be last!
    envVars = { ...
        'MDCE_DECODE_FUNCTION', decodeFunction; ...
        'MDCE_STORAGE_CONSTRUCTOR', props.StorageConstructor; ...
        'MDCE_JOB_LOCATION', props.JobLocation; ...
        'MDCE_MATLAB_EXE', props.MatlabExecutable; ...
        'MDCE_MATLAB_ARGS', matlabArgs; ...
        'MDCE_DEBUG', 'true'; ...
        'MLM_WEB_LICENSE', props.UseMathworksHostedLicensing; ...
        'MLM_WEB_USER_CRED', props.UserToken; ...
        'MLM_WEB_ID', props.LicenseWebID; ...
        'MDCE_LICENSE_NUMBER', props.LicenseNumber; ...
        'MDCE_STORAGE_LOCATION', props.StorageLocation; };

    % Remove empty environment variables
    envVars(cellfun(@(x) isempty(strtrim(x)), envVars(:, 2)), :) = [];
 
    % Additional submission arguments passed to sbatch
    if ~isempty(varargin)
        % Before MATLAB 9.3.0
        submitArgs = varargin;
    elseif isprop(cluster.AdditionalProperties, 'submitArgCount')
        % Newer MATLAB versions
        addProps = cluster.AdditionalProperties;
        
        submitArgCount = addProps.submitArgCount;
        submitArgs = cell(1, submitArgCount);
        
        for curIdx = 1:submitArgCount
            curName = sprintf('submitArg%d', curIdx);
            submitArgs{curIdx} = addProps.(curName);
        end
    else
        submitArgs = {};
    end
    
    % Finalize arguments
    submitArgs = strrep(submitArgs, ...
        '{:taskCount:}', num2str(numTasks));
    submitArgs{end + 1} = ...
        sprintf('--job-name="%s"', jobName);
    
    % check if building the script can be simplified by building the
    % task location and log simply from the task and job number
    simple = all(arrayfun(@(x) strcmp(fullfile(props.JobLocation,sprintf('Task%d',x)),taskLocs{x})&strcmp(fullfile(cluster.JobStorageLocation,props.JobLocation,sprintf('Task%d.log',x)),taskLogs{x}),1:numTasks));
    
    % build script
    script = buildJobScript( ...
        numTasks, submitArgs, taskLocs, taskLogs, envVars,simple,cluster.JobStorageLocation);

end

function script = buildJobScript( ...
        numTasks, submitArgs, taskLocs, taskLogs, envVars,simple,jobStorageLocation)
    q = '''';
    jobLocation = envVars{strcmp(envVars(:,1),'MDCE_JOB_LOCATION'),2};
    parts = {};
    parts{end + 1} = [ ...
        '#!/bin/bash\n', ...
        '#SBATCH --output=/dev/stdout\n', ...
        '#SBATCH --error=/dev/stderr\n'];

    parts{end + 1} = [ ...
        '\n', ...
        '# setting additional slurm parameters\n'];

    % use submitted arguments
    for argIdx = 1:length(submitArgs)
        argVal = submitArgs{argIdx};
        parts{end + 1} = ['#SBATCH ', argVal, '\n'];
    end

    parts{end + 1} = [ ...
        '\n', ...
        '# job specific environment variables\n'];

    % set environment variables
    for varIdx = 1:size(envVars, 1)
        varName = envVars{varIdx, 1};
        varVal = envVars{varIdx, 2};
        parts{end + 1} = [ ...
            'export ', varName, '=', q, varVal, q, '\n'];
    end

    % redirect stdout
    parts{end + 1} = [ ...
        '\n', ...
        '# closing standard out and error\n', ...
        'exec 1<&-\n', ...
        'exec 2<&-\n'];

    % set task specific stuff
    parts{end + 1} = [
        '\n', ...
        '# setting up task specific stuff\n'];
    if simple
        parts{end+1} = [ ...
            sprintf('MDCE_TASK_LOCATION="%s/Task$SLURM_ARRAY_TASK_ID"\n',jobLocation), ...
            sprintf('exec 1<>"%s"\n',fullfile(jobStorageLocation,jobLocation,'Task$SLURM_ARRAY_TASK_ID.log'))];
    else
        parts{end+1} = 'case $SLURM_ARRAY_TASK_ID in\n';
        for taskIdx = 1:numTasks
            taskLoc = taskLocs{taskIdx};
            taskLog = taskLogs{taskIdx};
            
            parts{end + 1} = [ ...
                '\t', num2str(taskIdx), ')\n', ...
                '\t\t', 'MDCE_TASK_LOCATION=', q, taskLoc, q, '\n', ...
                '\t\t', 'exec 1<>', q, taskLog, q, '\n', ...
                '\t\t', ';;\n'];
        end
        
        % end task specific stuff
        parts{end + 1} = [
            '\t', '*)\n', ...
            '\t\t', 'echo "Error!"\n', ...
            'esac\n'];
    end
    % redirect stderr to stdout
    parts{end + 1} = [ ...
        '\n', ...
        '# redirect standard error to output\n', ...
        'exec 2>&1\n'];

    % export task location
    parts{end + 1} = [ ...
        '\n', ...
        '# export task location\n', ...
        'export MDCE_TASK_LOCATION\n'];

    % set working directory
    parts{end + 1} = [ ...
        '\n', ...
        '# set working directory\n', ...
        'cd "${SLURM_SUBMIT_DIR}"\n'];

    % execute tasks
    parts{end + 1} = [ ...
        '\n', ...
        '# Run main command\n', ...
        'echo "Executing: ${MDCE_MATLAB_EXE} ${MDCE_MATLAB_ARGS}"\n', ...
        'exec "${MDCE_MATLAB_EXE}" ${MDCE_MATLAB_ARGS}\n'];

    % build script
    script = strjoin(parts, '');
end
